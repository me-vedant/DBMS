https://datalemur.com/
https://sqlzoo.net/
http://sqlfiddle.com/#!9/a6c585/1
https://www.sql-practice.com/


CREATE TABLE LMS_MEMBERS   
(  
MEMBER_ID VARCHAR2(10 BYTE),   
MEMBER_NAME VARCHAR2(30 BYTE) NOT NULL ,   
CITY VARCHAR2(20 BYTE),   
DATE_REGISTER DATE NOT NULL ,   
DATE_EXPIRE DATE,   
MEMBERSHIP_STATUS VARCHAR2(15 BYTE) NOT NULL ,   
CONSTRAINT PK_MBR_ID PRIMARY KEY (MEMBER_ID)    
);

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM001','Akshay','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('26-10-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM002','Amruta','PUNE',to_date('02-03-20','DD-MM-RR'),to_date('03-06-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM003','Ashish','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('17-08-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM004','Bhakti','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('12-05-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM005','Gautam','BANGALORE',to_date('12-06-18','DD-MM-RR'),to_date('06-11-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM006','Hetvi','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('26-10-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM007','Mayur','Pune',to_date('19-09-19','DD-MM-RR'),to_date('19-10-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM008','Nikhil','Bangalore',to_date('09-03-20','DD-MM-RR'),to_date('03-06-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM009','Nikita','Delhi',to_date('12-12-12','DD-MM-RR'),to_date('12-12-21','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM010','Preity','Kerala',to_date('17-06-19','DD-MM-RR'),to_date('11-08-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM011','Priti','Punjab',to_date('19-08-19','DD-MM-RR'),to_date('23-12-23','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM012','Rasika','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('26-10-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM013','Renuka','PUNE',to_date('02-08-20','DD-MM-RR'),to_date('03-06-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM014','Sandeep','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('17-08-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM015','Saurabh','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('12-05-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM016','Sayali','BANGALORE',to_date('12-06-18','DD-MM-RR'),to_date('06-11-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM017','Shruti','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('26-10-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM018','Smita','Pune',to_date('19-09-19','DD-MM-RR'),to_date('19-10-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM019','Snehal','Bangalore',to_date('09-03-20','DD-MM-RR'),to_date('03-06-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM020','Supriya','Delhi',to_date('12-12-12','DD-MM-RR'),to_date('12-12-21','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM021','Writankar','Kerala',to_date('17-06-19','DD-MM-RR'),to_date('17-06-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM022','Amit','Punjab',to_date('19-08-19','DD-MM-RR'),to_date('23-12-23','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM023','Ritesh','Bangalore',to_date('12-06-18','DD-MM-RR'),to_date('17-08-20','DD-MM-RR'),'Permanent');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM024','Gaurav','Delhi',to_date('12-06-18','DD-MM-RR'),to_date('12-05-20','DD-MM-RR'),'Temporary');

Insert into LMS_MEMBERS (MEMBER_ID,MEMBER_NAME,CITY,DATE_REGISTER,DATE_EXPIRE,MEMBERSHIP_STATUS) values ('LM025','Sagar','Kerala',to_date('12-06-18','DD-MM-RR'),to_date('06-11-20','DD-MM-RR'),'Temporary');

CREATE TABLE LMS_SUPPLIERS_DETAILS   
(  
SUPPLIER_ID VARCHAR2(3 BYTE),   
SUPPLIER_NAME VARCHAR2(30 BYTE) NOT NULL ,   
ADDRESS VARCHAR2(50 BYTE),   
CONTACT NUMBER(10,0) NOT NULL ,   
EMAIL VARCHAR2(15 BYTE) NOT NULL ,   
CONSTRAINT PK_SP_ID PRIMARY KEY (SUPPLIER_ID)  
);

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S01','SINGAPORE SHOPPEE','CHENNAI',9894123555,'sing@gmail.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S02','JK Stores','MUMBAI',9940123450,'jks@yahoo.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S03','ROSE BOOK STORE','TRIVANDRUM',9444411222,'rose@gmail.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S04','KAVARI STORE','DELHI',8630001452,'kavi@redif.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S05','EINSTEN BOOK GALLARY','US',9542000001,'eingal@aol.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S06','AKBAR STORE','MUMBAI',7855623100,'akbakst@aol.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S07','GUPTA STORE','CHENNAI',9899023555,'rom@gmail.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S08','D MART','MUMBAI',9940123450,'dance@gmail.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S09','BIG BAZAAR','TRIVANDRUM',9445511222,'rock@gmail.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S10','JIO MART','DELHI',8644001452,'free@rediff.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S11','GODREJ FARM','US',9542440001,'champ@yahoo.com');

Insert into LMS_SUPPLIERS_DETAILS (SUPPLIER_ID,SUPPLIER_NAME,ADDRESS,CONTACT,EMAIL) values ('S12','ZOMATO','MUMBAI',7855623440,'money@gmail.com');

CREATE TABLE LMS_BOOK_DETAILS   
(  
BOOK_CODE VARCHAR2(10 BYTE),   
BOOK_TITLE VARCHAR2(100 BYTE) NOT NULL ,   
CATEGORY VARCHAR2(15 BYTE) NOT NULL ,   
AUTHOR VARCHAR2(30 BYTE) NOT NULL ,   
PUBLICATION VARCHAR2(30 BYTE),   
PUBLISH_DATE DATE,   
BOOK_EDITION NUMBER,   
PRICE NUMBER(8,2) NOT NULL ,   
RACK_NUM VARCHAR2(3 BYTE),   
DATE_ARRIVAL DATE,   
SUPPLIER_ID VARCHAR2(3 BYTE),   
CONSTRAINT PK_BOOK_CODE PRIMARY KEY (BOOK_CODE),   
CONSTRAINT FK_SP_ID FOREIGN KEY (SUPPLIER_ID)  REFERENCES LMS_SUPPLIERS_DETAILS (SUPPLIER_ID)   
) ;

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000001','Java How To Do Program','JAVA','Paul J. Deitel','Prentice Hall',to_date('10-12-99','DD-MM-RR'),6,600,'A1',to_date('10-05-11','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000002','Java: The Complete Reference ','JAVA','Herbert Schildt','Tata Mcgraw Hill ',to_date('10-10-11','DD-MM-RR'),5,750,'A1',to_date('10-05-11','DD-MM-RR'),'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000003','Java How To Do Program','JAVA','Paul J. Deitel','Prentice Hall',to_date('10-05-99','DD-MM-RR'),6,600,'A1',to_date('10-05-12','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000004','Java: The Complete Reference ','JAVA','Herbert Schildt','Tata Mcgraw Hill ',to_date('10-10-11','DD-MM-RR'),5,750,'A1',to_date('11-05-12','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000005','Java How To Do Program','JAVA','Paul J. Deitel','Prentice Hall',to_date('10-12-99','DD-MM-RR'),6,600,'A1',to_date('11-05-12','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000006','Java: The Complete Reference ','JAVA','Herbert Schildt','Tata Mcgraw Hill ',to_date('10-10-11','DD-MM-RR'),5,750,'A1',to_date('12-05-12','DD-MM-RR'),'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000007','Let Us C','C','Yashavant Kanetkar ','BPB Publications',to_date('11-12-10','DD-MM-RR'),9,500,'A3',to_date('03-11-10','DD-MM-RR'),'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000008','Python Cookbook: Recipes for Mastering Python 3','Python','Brian K. Jones','O''Reilly Media',to_date('10-05-13','DD-MM-RR'),3,350,null,to_date('10-06-19','DD-MM-RR'),'S02');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000009','Learn Python in 1 Day','Python','Krishna Rungta','Guru99',to_date('19-07-16','DD-MM-RR'),1,307,'A3',to_date('10-06-19','DD-MM-RR'),'S02');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000010','Python Programming:An Introduction to Computer Science','Python','John M Zelle','Ingram short title',to_date('01-01-16','DD-MM-RR'),3,1200,null,null,'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000011','C# 8.0 and .NET Core 3.0 – Modern Cross-Platform Development','C#','Mark J. Price','Packt Publishing',to_date('31-10-19','DD-MM-RR'),4,410,'A3',to_date('10-06-19','DD-MM-RR'),null);

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000012','C# 8.0 Pocket Reference: Instant Help for C# 8.0 Programmers','C#','Joseph Albahari ','O''Reilly Media',to_date('10-12-19','DD-MM-RR'),1,890,null,null,'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000013','Agile Principles, Patterns, and Practices in C#','C#','Robert C. Martin','Pearson',to_date('20-06-06','DD-MM-RR'),5,630,null,to_date('12-09-09','DD-MM-RR'),null);

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000014','Clean Code: A Handbook of Agile Software Craftsmanship','FUNDAMENTALS','Robert C. Martin','Prentice Hall',to_date('20-05-18','DD-MM-RR'),1,520,'A3',to_date('01-06-19','DD-MM-RR'),'S06');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000015','Introduction to Algorithms','ALGORITHMS','Thomas H. Cormen','The MIT Press',to_date('02-06-19','DD-MM-RR'),3,1220,'A4',to_date('02-08-19','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000016','Structure and Interpretation of Computer Programs (SICP)','FUNDAMENTALS','Harold Abelson','The MIT Press',to_date('02-08-11','DD-MM-RR'),4,1880,'A5',to_date('10-09-14','DD-MM-RR'),'S02');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000017','The Clean Coder: A Code of Conduct for Professional Programmers','FUNDAMENTALS','Robert C. Martin','Prentice Hall',to_date('02-06-15','DD-MM-RR'),5,3000,'A6',to_date('10-02-19','DD-MM-RR'),'S06');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000018','Code Complete: A Practical Handbook of Software Construction','FUNDAMENTALS','Steve McConnell','Microsoft Press',to_date('05-04-11','DD-MM-RR'),3,4500,'A5',to_date('03-12-11','DD-MM-RR'),'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000019','Design Patterns: Elements of Reusable Object-Oriented Software','FUNDAMENTALS','Erich Gamma','Addison-Wesley Professional',to_date('02-01-01','DD-MM-RR'),1,450,'A8',to_date('06-06-11','DD-MM-RR'),'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000020','The Pragmatic Programmer','FUNDAMENTALS','David Thomas','Addison-Wesley Professional',to_date('06-06-06','DD-MM-RR'),3,750,'A9',to_date('12-12-11','DD-MM-RR'),'S03');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000021','Head First Design Patterns: A Brain-Friendly Guide','JAVA','Eric Freeman','O''Reilly Media',to_date('05-05-05','DD-MM-RR'),1,860,'A2',to_date('05-05-06','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000023','Algorithms Unlocked','ALGORITHMS','Thomas H. Cormen','The MIT Press',to_date('02-12-12','DD-MM-RR'),2,860,'A8',to_date('02-12-13','DD-MM-RR'),'S01');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000024','The Algorithm Design Manual','ALGORITHMS',' Steven S. Skiena','Addison-Wesley Professional',to_date('02-12-12','DD-MM-RR'),6,456,'A6',to_date('02-12-13','DD-MM-RR'),null);

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000025','Algorithms','ALGORITHMS','Robert Sedgewick','The MIT Press',to_date('06-04-11','DD-MM-RR'),2,630,'A3',to_date('02-12-13','DD-MM-RR'),'S02');

Insert into LMS_BOOK_DETAILS (BOOK_CODE,BOOK_TITLE,CATEGORY,AUTHOR,PUBLICATION,PUBLISH_DATE,BOOK_EDITION,PRICE,RACK_NUM,DATE_ARRIVAL,SUPPLIER_ID) values ('BL000026','Advanced Data Structures','DATA STRUCTURES','Peter Brass','The MIT Press',to_date('08-08-08','DD-MM-RR'),6,780,'A3',to_date('09-09-09','DD-MM-RR'),'S05');

CREATE TABLE LMS_FINE_DETAILS  
(  
FINE_RANGE VARCHAR2(3 BYTE),   
FINE_AMOUNT NUMBER(10,2) NOT NULL ,   
MAX_DAYS_DELAYED NUMBER,   
CONSTRAINT PK_FR PRIMARY KEY (FINE_RANGE)  
);

Insert into LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT,MAX_DAYS_DELAYED) values ('R1',20,5);

Insert into LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT,MAX_DAYS_DELAYED) values ('R2',50,10);

Insert into LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT,MAX_DAYS_DELAYED) values ('R3',75,15);

Insert into LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT,MAX_DAYS_DELAYED) values ('R4',100,20);

Insert into LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT,MAX_DAYS_DELAYED) values ('R5',150,25);

Insert into LMS_FINE_DETAILS (FINE_RANGE,FINE_AMOUNT,MAX_DAYS_DELAYED) values ('R6',200,90);

CREATE TABLE LMS_BOOK_ISSUE  
(	 
BOOK_ISSUE_NO NUMBER,  
MEMBER_ID VARCHAR2(10 BYTE) NOT NULL ,  
BOOK_CODE VARCHAR2(10 BYTE) NOT NULL ,  
DATE_ISSUE DATE NOT NULL ,  
DATE_RETURN DATE NOT NULL ,  
DATE_RETURNED DATE ,  
FINE_RANGE VARCHAR2(3 BYTE),  
CONSTRAINT PK_BOOK_ISSUE_NO PRIMARY KEY (BOOK_ISSUE_NO),  
CONSTRAINT FK_MEM_ID FOREIGN KEY (MEMBER_ID)  REFERENCES LMS_MEMBERS (MEMBER_ID) ,  
CONSTRAINT FK_BOOKDETAIL FOREIGN KEY (BOOK_CODE)  REFERENCES LMS_BOOK_DETAILS (BOOK_CODE) ,  
CONSTRAINT FK_FINEDETAIL FOREIGN KEY (FINE_RANGE)  REFERENCES LMS_FINE_DETAILS (FINE_RANGE) , 
CONSTRAINT CHK_DATE_ISSUE CHECK ( DATE_ISSUE < DATE_RETURN  )  
);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (1,'LM001','BL000001',to_date('01-05-12','DD-MM-RR'),to_date('16-05-12','DD-MM-RR'),to_date('16-05-12','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (2,'LM002','BL000002',to_date('01-05-12','DD-MM-RR'),to_date('06-05-12','DD-MM-RR'),to_date('16-05-12','DD-MM-RR'),'R2');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (3,'LM003','BL000007',to_date('01-04-12','DD-MM-RR'),to_date('16-04-12','DD-MM-RR'),to_date('20-04-12','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (4,'LM004','BL000005',to_date('01-04-12','DD-MM-RR'),to_date('16-04-12','DD-MM-RR'),to_date('20-04-12','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (5,'LM005','BL000005',to_date('20-04-12','DD-MM-RR'),to_date('05-05-12','DD-MM-RR'),to_date('05-05-12','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (6,'LM003','BL000007',to_date('22-04-12','DD-MM-RR'),to_date('07-05-12','DD-MM-RR'),to_date('25-05-12','DD-MM-RR'),'R4');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (7,'LM001','BL000002',to_date('01-05-13','DD-MM-RR'),to_date('16-05-13','DD-MM-RR'),to_date('16-05-13','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (8,'LM002','BL000001',to_date('01-05-13','DD-MM-RR'),to_date('06-05-13','DD-MM-RR'),to_date('16-05-13','DD-MM-RR'),'R2');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (9,'LM003','BL000005',to_date('01-04-20','DD-MM-RR'),to_date('16-04-20','DD-MM-RR'),to_date('20-04-20','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (10,'LM004','BL000007',to_date('01-04-20','DD-MM-RR'),to_date('16-04-20','DD-MM-RR'),to_date('20-04-20','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (11,'LM005','BL000002',to_date('20-04-13','DD-MM-RR'),to_date('05-05-13','DD-MM-RR'),to_date('05-05-13','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (12,'LM003','BL000001',to_date('22-04-13','DD-MM-RR'),to_date('07-05-13','DD-MM-RR'),to_date('25-05-13','DD-MM-RR'),'R4');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (13,'LM001','BL000001',to_date('16-05-12','DD-MM-RR'),to_date('31-05-12','DD-MM-RR'),to_date('31-05-12','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (14,'LM002','BL000002',to_date('06-05-12','DD-MM-RR'),to_date('21-05-12','DD-MM-RR'),to_date('31-05-12','DD-MM-RR'),'R2');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (15,'LM003','BL000007',to_date('16-04-12','DD-MM-RR'),to_date('01-05-12','DD-MM-RR'),to_date('06-05-12','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (16,'LM004','BL000005',to_date('16-04-12','DD-MM-RR'),to_date('01-05-12','DD-MM-RR'),to_date('06-05-12','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (17,'LM005','BL000005',to_date('05-05-12','DD-MM-RR'),to_date('20-05-12','DD-MM-RR'),to_date('20-05-12','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (18,'LM003','BL000007',to_date('07-05-12','DD-MM-RR'),to_date('22-05-12','DD-MM-RR'),to_date('11-06-12','DD-MM-RR'),'R4');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (19,'LM001','BL000002',to_date('16-05-13','DD-MM-RR'),to_date('31-05-13','DD-MM-RR'),to_date('31-05-13','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (20,'LM002','BL000001',to_date('06-05-13','DD-MM-RR'),to_date('21-05-13','DD-MM-RR'),to_date('31-05-13','DD-MM-RR'),'R2');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (21,'LM003','BL000005',to_date('16-04-20','DD-MM-RR'),to_date('01-05-20','DD-MM-RR'),to_date('06-05-20','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (22,'LM004','BL000007',to_date('16-04-20','DD-MM-RR'),to_date('01-05-20','DD-MM-RR'),to_date('06-05-20','DD-MM-RR'),'R1');

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (23,'LM005','BL000002',to_date('05-05-13','DD-MM-RR'),to_date('20-05-13','DD-MM-RR'),to_date('20-05-13','DD-MM-RR'),null);

Insert into LMS_BOOK_ISSUE (BOOK_ISSUE_NO,MEMBER_ID,BOOK_CODE,DATE_ISSUE,DATE_RETURN,DATE_RETURNED,FINE_RANGE) values (24,'LM003','BL000001',to_date('07-05-13','DD-MM-RR'),to_date('22-05-13','DD-MM-RR'),to_date('11-06-13','DD-MM-RR'),'R4');


---======================================================--------------------------------
What Group by and Having is ? What is the need for it ?
--------------------------------

-- group by on no column
select count(*) cnt
from lms_members
having count(*) > 12;

-- group by on 1 column
select MEMBERSHIP_STATUS, count(*) cnt
from lms_members lm
group by MEMBERSHIP_STATUS
having count(*) > 12;

-- group by on more than 1 column 
select MEMBERSHIP_STATUS,city, count(*) cnt
from lms_members 
group by MEMBERSHIP_STATUS,city
having count(*) > 12;

----------------------------
-- aggregate functions introduction
----------------------------
create table test_aggregate( col1 number);
insert into test_aggregate values(1);
insert into test_aggregate values(2);
insert into test_aggregate values(3);
insert into test_aggregate values(4);

select col1 from test_aggregate;
select sum(col1) from test_aggregate;
select count(col1) from test_aggregate;
select min(col1) from test_aggregate;
select max(col1) from test_aggregate;
select avg(col1) AVG_COL from test_aggregate;

select sum(col1) ,count(col1) ,min(col1),max(col1),avg(col1) from test_aggregate;

--------------------
--Group by , having basic demo
--------------------
drop table seta;
create table seta ( col1 varchar2(100), col2 varchar2(100));
insert into seta values ('PUNE','GAURAV');
insert into seta values ('PUNE','SAGAR');
insert into seta values ('DELHI','DEVANSHU');
insert into seta values ('DELHI','PRATIK');
insert into seta values ('DELHI','DEVANDER');
insert into seta values ('JAIPUR','SHRUTI');

SELECT * FROM  SETA;
SELECT * FROM  SETA GROUP BY COL1;
SELECT col1,col2 FROM  SETA GROUP BY COL1;
SELECT col2 FROM  SETA GROUP BY COL1;
SELECT col1 FROM  SETA GROUP BY COL1;
SELECT col1,count(*) FROM  SETA GROUP BY COL1;
--
SELECT col1,count(*) FROM  SETA GROUP BY COL1 where  COUNT(*) > = 2 ;
SELECT col1,count(*) FROM  SETA GROUP BY COL1 having COUNT(*) > = 2 ;

-------------------
Full Fledged DEMO
-------------------
/* count of no of members in each city */

select  city ,count(*) counting_people_frm_ech_city
from lms_members 
group by city;

/* count of members against their membership_status */
status     cnt
Temporary   12
Permanant   13

select membership_status status, count(*) cnt
from lms_members 
where MEMBERSHIP_STATUS in ('Temporary')
group by membership_status;

/* count of suppliers who stay in PUNE/MUMBAI/DELHI against their city  */
select address , count(*) cnt_of_suppliers
from lms_suppliers_details 
where address in ('TRIVANDRUM','MUMBAI','DELHI')
group by address

/* number of books in each category that are placed in rack_num A1/A2/A3 */
select category , count(*) cnt_against_category
from lms_book_details
where rack_num in ('A1','A2','A3')
group by category

/* number of books issued in the month of APRIL/MAY  */
select table_name from user_tables;
select * from LMS_BOOK_DETAILS;
select * from LMS_BOOK_ISSUE;
select * from LMS_FINE_DETAILS;
select * from LMS_MEMBERS;
select * from LMS_SUPPLIERS_DETAILS;
insert into LMS_MEMBERS  values ('LM099','Akshay','CHENNAI',to_date('12-06-18','DD-MM-RR'),to_date('26-10-20','DD-MM-RR'),'UNDEFINED');


/* number of books issued in the month of APRIL/MAY  */

select DECODE(EXTRACT(MONTH FROM DATE_ISSUE) ,4,'April',5,'May') MONTH, COUNT(date_issue) NO_OF_BOOS_ISSUED
FROM LMS_BOOK_ISSUE 
GROUP BY EXTRACT(MONTH FROM DATE_ISSUE)
HAVING EXTRACT(MONTH FROM DATE_ISSUE) IN (4,5) ; 

/* count of members against their status and city */

select * from LMS_MEMBERS;

select MEMBERSHIP_STATUS,city , count(*)
from LMS_MEMBERS 
group by MEMBERSHIP_STATUS,city


/* count of suppliers against their respective category of email accounts who have gmail and yahoo accounts eg: gmail/yahoo
category cnt 
gmail     6
yahoo     2
*/

select * from LMS_SUPPLIERS_DETAILS;

select substr (email,-9,5)email , count(email)
from LMS_SUPPLIERS_DETAILS
--where email like '%gmail%' or email like '%yahoo%'
group by substr (email,-9,5) 
having substr (email,-9,5) in ('gmail' , 'yahoo')



/* count of suppliers against their respective category of email accounts who have gmail and yahoo accounts eg: gmail/yahoo
category cnt 
gmail     6
yahoo     2
using case
*/

select count(email),
(case

    When Email like '%gmail%' then 'gmail'
    When Email like '%yahoo%' then 'yahoo'
end )mails
from LMS_SUPPLIERS_DETAILS 
where email like '%gmail%' or email like '%yahoo%'
group by (case

    When Email like '%gmail%' then 'gmail'
    When Email like '%yahoo%' then 'yahoo'
end );

/* category of book ,
    total number of books under that category 
    such that the category has more than 2 books 
*/
select * from LMS_BOOK_DETAILS;
select * from LMS_BOOK_ISSUE;

select CATEGORY, count(*)
from LMS_BOOK_DETAILS
group by CATEGORY
having count(*) > 2

/* book code and name of the book which has been issued atleast twice */ 
select bd.BOOK_TITLE,bd.book_code, count(bi.BOOK_CODE)
from LMS_BOOK_ISSUE bi inner join LMS_BOOK_DETAILS bd on (bi.BOOK_CODE = bd.BOOK_CODE)
group by bd.book_code,bd.BOOK_TITLE
having count(bi.BOOK_CODE) > 2

/* book codes and their issued counts */
select bd.book_code,count(*)
from LMS_BOOK_ISSUE bi inner join LMS_BOOK_DETAILS bd on (bi.BOOK_CODE = bd.BOOK_CODE)
group by  bd.book_code

/* book_code and name of the book which has been issued more than 4 times 
   and has more than 0 suppliers 
   (Note: Java how to program has 2 book codes because of different published date) 
*/

select bd.BOOK_CODE,bd.BOOK_TITLE, count(bd.BOOK_CODE)
from LMS_BOOK_ISSUE bi inner join LMS_BOOK_DETAILS bd on (bi.BOOK_CODE = bd.BOOK_CODE) join LMS_SUPPLIERS_DETAILS sd on (bd.SUPPLIER_ID = sd.SUPPLIER_ID )
group by bd.BOOK_CODE,bd.BOOK_TITLE
having count(bd.BOOK_CODE) > 4

/* name of the book which has been issued more than 4 times and has more than 0 suppliers */

select bd.book_title, count(bd.BOOK_TITLE)
from LMS_BOOK_ISSUE bi inner join LMS_BOOK_DETAILS bd on (bi.BOOK_CODE = bd.BOOK_CODE) join LMS_SUPPLIERS_DETAILS sd on (bd.SUPPLIER_ID = sd.SUPPLIER_ID )
group by bd.BOOK_TITLE
having count(bd.BOOK_TITLE) > 4

/*
-- name of the supplier along with his contact number with an  flag 'Y' or 'N'
-- 'y' -> he had supplied a book which has been issued to two or more members 
-- 'n' --> he had supplied a book which has been issued to  less than two members 
-- 'NA' --> if he hasn't supplied any book 


supplier_name supplier_contact flag
xyz             9090           Y    -> he had supplied a book which has been issued to two or more members 
abc             9090           N    -> he had supplied a book which has been issued to  less than two members 
efg             9090           NA   -> if he hasn't supplied any book 

*/
select * from LMS_BOOK_ISSUE;
select * from LMS_BOOK_DETAILS;

select table_name from user_tables;
select * from LMS_BOOK_DETAILS;
select * from LMS_BOOK_ISSUE;
select * from LMS_FINE_DETAILS;
select * from LMS_MEMBERS;
select * from LMS_SUPPLIERS_DETAILS;

select sd.supplier_name,sd.CONTACT, 
case
    when count(bd.supplier_id) = 0 then 'na'
    
    when count(bd.supplier_id) >= 2and count(bi.book_code) >= 2 then 'y'
    else
    'n'
end  as FLAG

from LMS_SUPPLIERS_DETAILS sd full outer join LMS_BOOK_DETAILS bd on( sd.SUPPLIER_ID = bd.SUPPLIER_ID) full outer  join LMS_BOOK_ISSUE bi on ( bd.book_code = bi.book_code)
where sd.supplier_name is not null
group by sd.supplier_name,sd.CONTACT
    ================================================================================================================================================
    /*Oracle  [10 marks]
----------------
1) create a table named EMPLOYEES (empno,name,job,hiredate,salary,commission,deptno)
   with empno as pk and deptno as fk 
   create table named DEPARTMENTS (deptno,name,location) with deptno as pk [2 marks]

2) Insert 6-7 records to the table [0 marks]
3) Fire following queries on the table [2 marks each]

a) provide the names of all employees which belong to a department name "Engineering"
   and whose salary is between 1000 and 10000
b) provide the count of no of employees in a given dept_no
c) update the commission of all employees by 60 percent
d) delete the employees whose commission is less than 1000 */

create table employees(
empno varchar2(100) constraint cons1 Primary key,
name varchar2(100),
job varchar2(100),
hiredate date,
salary int,
commission float,
deptno number
);


create table departments(
deptno number constraint cons3 Primary key,
name varchar2(100),
location varchar2(100)
);
drop table departments;
drop table employees;

insert into employees values ('v1','vedant','hacker',to_date('2022-12-12','yyyy-mm-dd'),2002,500,1);
insert into employees values ('v2','a','engg',to_date('2012-12-12','yyyy-mm-dd'),100,450,1);
insert into employees values ('v3','b','sales',to_date('2000-10-12','yyyy-mm-dd'),450,250,2);

insert into departments values (1,'Engg','Thane');
insert into departments values (2,'sales','NaviMumbai');

--a) provide the names of all employees which belong to a department name "Engineering"
  -- and whose salary is between 1000 and 10000
  
select * from employees; 

select emp.name, dept.deptno
from  employees emp inner join  departments dept on (emp.deptno = dept.deptno) 
where emp.deptno = 1;
--b) provide the count of no of employees in a given dept_no

select deptno , count (*)
from employees
group by deptno ;

--c) update the commission of all employees by 60 percent
update employees
set commission = commission *1.6;
select * from employees;
-- d) delete the employees whose commission is less than 1000 
delete from employees
where commission < 1000;


=============================================================================================================================================
create table OrderDetails
(ordid int constraint cons1 Primary Key,
orddate Date,
customername varchar2(100),
totalamount float
);
create table ordererproduct
(productid int constraint cons2 Primary Key,
orderid int,
price float,
discount float,
qty int
);
create table product_master
(productid int constraint cons3 Primary Key,
productname varchar2(100),
suppliername varchar2(100),
masterprice varchar2(100)
);

insert into OrderDetails values(1,to_date('2022-11-06','yyyy-mm-dd'),'vedant',100000.65);
insert into OrderDetails values(2,to_date('2021-11-06','yyyy-mm-dd'),'abhi',989898.65);
insert into OrderDetails values(3,to_date('2019-11-06','yyyy-mm-dd'),'hrishi',5454.65);
insert into OrderDetails values(4,to_date('2022-11-08','yyyy-mm-dd'),'sumeet ',700.65);
insert into OrderDetails values(5,to_date('2022-07-06','yyyy-mm-dd'),'vikas',656.65);

insert into ordererproduct values(1,1,6689.65,600.95,150);
insert into ordererproduct values(2,2,70000.65,6320.95,25);
insert into ordererproduct values(3,3,454.45,855.95,35);
insert into ordererproduct values(4,4,7852.65,100.95,7);
insert into ordererproduct values(5,5,3000.65,99.95,2);

insert into product_master values(1,'Books','Dmart',6689.65);
insert into product_master values(2,'Gold','Swiggy',70000);
insert into product_master values(3,'Tank','Zomato',1000);
insert into product_master values(4,'Planes','FEDEX',800);
insert into product_master values(5,'Laptops','Amazon',6500.3);
insert into product_master values(6,'Phones','Amazon',6500.3);


select od.orddate, od.customername,  pm.productname, pm.suppliername
from OrderDetails od full outer join ordererproduct op on ( od.ordid = op.orderid)  full outer join product_master pm on (pm.productid = op.productid )
where totalamount > 20000;

select ordid, customername, totalamount from OrderDetails
where extract (year from orddate) < 2022

select pm.productname, pm.productid
from OrderDetails od full outer join ordererproduct op on(od.ordid = op.orderid) 
right join product_master pm on (pm.productid = op.productid)

select od.ordid  , od.customername ,op.productid ,op.qty 
from OrderDetails od inner join ordererproduct op on ( od.ordid = op.orderid) 
where op.qty > 7 and op.qty <12;

select  sum(masterprice) sum_master_price,max(masterprice) max_price , min(masterprice) min_price
from product_master 


================================
select sng.songname 
from song sng 
where DURATION >=2 and DURATION <= 7;

















 


















 










